/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ebiblio;
import connexionbd.*;
import static ebiblio.formemain.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author THIERRY
 */
public class formlivre extends javax.swing.JInternalFrame {

    /**
     * Creates new form formlivre
     */
    public formlivre() {
        initComponents();
        // Initialisation du modèle de tableau
    initTableModel();
    
    // Chargement des données au démarrage
    chargerDonneesLivres();
    // Ajoutez ceci dans votre constructeur après l'initialisation des composants
tabLivre.getSelectionModel().addListSelectionListener(e -> {
    if (!e.getValueIsAdjusting()) {
        int selectedRow = tabLivre.getSelectedRow();
        if (selectedRow >= 0) {
            // Remplir les champs avec les données de la ligne sélectionnée
            txtTitre.setText(tabLivre.getValueAt(selectedRow, 1).toString());
            txtAuteur.setText(tabLivre.getValueAt(selectedRow, 2).toString());
            cbType.setSelectedItem(tabLivre.getValueAt(selectedRow, 3).toString());
            txtISBN.setText(tabLivre.getValueAt(selectedRow, 4).toString());
            txtExemple.setText(tabLivre.getValueAt(selectedRow, 5).toString());
        }
    }
});
    }
    
    
    
    
    private void initTableModel() {
    // Création du modèle avec les colonnes
    DefaultTableModel model = new DefaultTableModel(
        new Object[]{"ID", "Titre", "Auteur", "Type", "ISBN", "Ex. totaux", "Ex. dispo"}, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Toutes les cellules non éditables
        }
        
        @Override
        public Class<?> getColumnClass(int column) {
            // Important pour le tri correct des colonnes
            switch (column) {
                case 0: case 5: case 6: return Integer.class; // Colonnes numériques
                default: return String.class;
            }
        }
    };
    
    tabLivre.setModel(model);
    
    // Active le tri sur les en-têtes
    tabLivre.setAutoCreateRowSorter(true);
}

private void chargerDonneesLivres() {
    DefaultTableModel model = (DefaultTableModel) tabLivre.getModel();
    model.setRowCount(0); // Vide le tableau avant rechargement

    try (Connection con = connexionbd.seConnecter();
         Statement st = con.createStatement();
         ResultSet rs = st.executeQuery("SELECT * FROM livres ORDER BY titre")) {
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("titre"),
                rs.getString("auteur"),
                rs.getString("type"),
                rs.getString("isbn"),
                rs.getInt("exemplaires_totaux"),
                rs.getInt("exemplaires_disponibles")
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Erreur lors du chargement des livres: " + e.getMessage(),
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
    }
}
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAnnuler = new javax.swing.JButton();
        btnSupprimer = new javax.swing.JButton();
        btnModifier = new javax.swing.JButton();
        btnEnregistrer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabLivre = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtAuteur = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTitre = new javax.swing.JTextField();
        txtISBN = new javax.swing.JTextField();
        txtExemple = new javax.swing.JTextField();
        txtRecherher = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cbType = new javax.swing.JComboBox<>();
        btnrechercher = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel1.setBackground(new java.awt.Color(255, 0, 0));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-book-stack-50.png"))); // NOI18N
        jLabel1.setText("GESTION DES LIVRES");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnAnnuler.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAnnuler.setText("Annuler");
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnulerActionPerformed(evt);
            }
        });

        btnSupprimer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSupprimer.setForeground(new java.awt.Color(255, 51, 51));
        btnSupprimer.setText("Supprimer");
        btnSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupprimerActionPerformed(evt);
            }
        });

        btnModifier.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnModifier.setText("Modifier");
        btnModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifierActionPerformed(evt);
            }
        });

        btnEnregistrer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEnregistrer.setForeground(new java.awt.Color(0, 153, 51));
        btnEnregistrer.setText("Enregistrer");
        btnEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnregistrerActionPerformed(evt);
            }
        });

        tabLivre.setBackground(new java.awt.Color(204, 204, 204));
        tabLivre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Titre", "Auteur", "Type", "Exempaire", "Disponibilité"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabLivre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabLivreMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabLivre);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel2.setText("Titre");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel3.setText("Auteur");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel4.setText("Type");

        txtAuteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuteurActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel5.setText("ISBN");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel6.setText("Exemple");

        txtExemple.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtExempleKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/fond_bibliothèque.jpg"))); // NOI18N

        cbType.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scientifique", "Littéraire" }));
        cbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTypeActionPerformed(evt);
            }
        });

        btnrechercher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/rechercher_32.png"))); // NOI18N
        btnrechercher.setText("rechercher");
        btnrechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrechercherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(btnSupprimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtExemple, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .addComponent(txtISBN)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnEnregistrer)
                                .addGap(49, 49, 49)
                                .addComponent(btnModifier)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAnnuler))
                            .addComponent(cbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(txtRecherher, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)))
                        .addGap(32, 32, 32)
                        .addComponent(btnrechercher))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtAuteur, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAuteur, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtExemple, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtRecherher, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnrechercher))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSupprimer)
                                .addComponent(btnEnregistrer)
                                .addComponent(btnModifier)
                                .addComponent(btnAnnuler))))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(326, 326, 326)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupprimerActionPerformed
        // TODO add your handling code here:
         // 1. Vérifier qu'une ligne est sélectionnée dans le tableau
    int selectedRow = tabLivre.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this,
            "Veuillez sélectionner un livre à supprimer",
            "Aucune sélection",
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 2. Récupérer l'ID du livre sélectionné
    int livreId = (int) tabLivre.getValueAt(selectedRow, 0); // ID dans la 1ère colonne

    // 3. Confirmation de suppression
    int confirm = JOptionPane.showConfirmDialog(this,
        "Êtes-vous sûr de vouloir supprimer ce livre ?\nCette action est irréversible.",
        "Confirmation de suppression",
        JOptionPane.YES_NO_OPTION);

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    Connection con = null;
    PreparedStatement ps = null;

    try {
        // 4. Connexion à la BDD
        con = connexionbd.seConnecter();

        // 5. Vérifier si le livre est emprunté
        String checkEmprunt = "SELECT id FROM emprunts WHERE livre_id = ? AND statut = 'En cours'";
        ps = con.prepareStatement(checkEmprunt);
        ps.setInt(1, livreId);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(this,
                "Impossible de supprimer : ce livre est actuellement emprunté",
                "Suppression bloquée",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 6. Suppression dans statistiquelivre (contrainte de clé étrangère)
        String deleteStats = "DELETE FROM statistiquelivre WHERE livre_id = ?";
        ps = con.prepareStatement(deleteStats);
        ps.setInt(1, livreId);
        ps.executeUpdate();

        // 7. Suppression du livre
        String deleteLivre = "DELETE FROM livres WHERE id = ?";
        ps = con.prepareStatement(deleteLivre);
        ps.setInt(1, livreId);
        int rowsDeleted = ps.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this,
                "Livre supprimé avec succès",
                "Succès",
                JOptionPane.INFORMATION_MESSAGE);
            
            // 8. Actualiser le tableau
            chargerDonneesLivres();
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this,
            "Erreur SQL lors de la suppression : " + e.getMessage(),
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this,
            "Erreur de connexion à la base de données",
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
    } finally {
        // 9. Fermeture des ressources
        try {
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException e) {
        }
    }
    }//GEN-LAST:event_btnSupprimerActionPerformed

    
    private void btnModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifierActionPerformed
        // TODO add your handling code here:
        // 1. Vérifier qu'une ligne est sélectionnée
    int selectedRow = tabLivre.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, 
            "Veuillez sélectionner un livre à modifier", 
            "Aucune sélection", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 2. Récupérer l'ID du livre sélectionné (colonne 0)
    int livreId = (int) tabLivre.getValueAt(selectedRow, 0);

    // 3. Récupérer les nouvelles valeurs depuis les champs texte
    String nouveauTitre = txtTitre.getText().trim();
    String nouvelAuteur = txtAuteur.getText().trim();
    String nouveauType = (String) cbType.getSelectedItem();
    String nouvelISBN = txtISBN.getText().trim();
    String nouveauxExemplaires = txtExemple.getText().trim();

    // 4. Validation des champs
    if (nouveauTitre.isEmpty() || nouvelAuteur.isEmpty() || nouvelISBN.isEmpty() || nouveauxExemplaires.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Tous les champs sont obligatoires", 
            "Champs manquants", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // 5. Conversion du nombre d'exemplaires
        int exemplaires = Integer.parseInt(nouveauxExemplaires);
        if (exemplaires <= 0) {
            JOptionPane.showMessageDialog(this, 
                "Le nombre d'exemplaires doit être supérieur à 0", 
                "Valeur incorrecte", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 6. Connexion à la BDD
        Connection con = connexionbd.seConnecter();

        // 7. Vérification que l'ISBN n'existe pas déjà pour un autre livre
        String checkISBN = "SELECT id FROM livres WHERE isbn = ? AND id != ?";
        PreparedStatement psCheck = con.prepareStatement(checkISBN);
        psCheck.setString(1, nouvelISBN);
        psCheck.setInt(2, livreId);
        ResultSet rs = psCheck.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(this, 
                "Un autre livre utilise déjà cet ISBN", 
                "ISBN existant", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 8. Mise à jour dans la base de données
        String sql = "UPDATE livres SET " +
                     "titre = ?, " +
                     "auteur = ?, " +
                     "type = ?, " +
                     "isbn = ?, " +
                     "exemplaires_totaux = ?, " +
                     "exemplaires_disponibles = exemplaires_disponibles + (? - exemplaires_totaux) " +
                     "WHERE id = ?";

        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, nouveauTitre);
        ps.setString(2, nouvelAuteur);
        ps.setString(3, nouveauType);
        ps.setString(4, nouvelISBN);
        ps.setInt(5, exemplaires);
        ps.setInt(6, exemplaires);
        ps.setInt(7, livreId);

        int rowsUpdated = ps.executeUpdate();

        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, 
                "Livre modifié avec succès", 
                "Succès", 
                JOptionPane.INFORMATION_MESSAGE);
            
            // 9. Rafraîchir les données du tableau
            chargerDonneesLivres();
            
            // 10. Vider les champs
            txtTitre.setText("");
            txtAuteur.setText("");
            cbType.setSelectedIndex(0);
            txtISBN.setText("");
            txtExemple.setText("");
        }

        // 11. Fermer les ressources
        ps.close();
        con.close();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, 
            "Le nombre d'exemplaires doit être un nombre valide", 
            "Format incorrect", 
            JOptionPane.ERROR_MESSAGE);
    } catch (SQLException | ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this, 
            "Erreur lors de la modification: " + e.getMessage(), 
            "Erreur BDD", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnModifierActionPerformed

    private void btnEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnregistrerActionPerformed
        // TODO add your handling code here
        // Récupération des valeurs
    String titre = txtTitre.getText().trim();
    String auteur = txtAuteur.getText().trim();
    String isbn = txtISBN.getText().trim();
    String type = (String) cbType.getSelectedItem();
    String exemplaires = txtExemple.getText().trim();

    // Validation basique
    if(titre.isEmpty() || auteur.isEmpty() || type.isEmpty() || isbn.isEmpty() || exemplaires.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires");
        return;
    }

    try {
        // Connexion avec votre méthode existante
        con = connexionbd.seConnecter();
        st = con.createStatement();

        // Vérification ISBN existant
        ResultSet rs = st.executeQuery("SELECT id FROM livres WHERE isbn = '"+isbn+"'");
        if(rs.next()) {
            JOptionPane.showMessageDialog(this, "Un livre avec cet ISBN existe déjà");
            return;
        }

        // Insertion directe comme dans votre exemple
        String sql = "INSERT INTO livres (titre, auteur, type, isbn, exemplaires_totaux, exemplaires_disponibles) " +
                     "VALUES ('"+titre+"','"+auteur+"','"+type+"','"+isbn+"',"+exemplaires+","+exemplaires+")"; 

        st.executeUpdate(sql);

        // Mise à jour des statistiques
        st.executeUpdate("INSERT INTO statistiquelivre (livre_id, nombre_emprunts) " +
                       "VALUES (LAST_INSERT_ID(), 0)");

        JOptionPane.showMessageDialog(this, "Livre enregistré avec succès!");
        
        // Rafraîchissement
        txtTitre.setText("");
        txtAuteur.setText("");
        cbType.setSelectedIndex(0);
        txtISBN.setText("");
        txtExemple.setText("");
        chargerDonneesLivres();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erreur SQL: " + e.getMessage());
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this, "Erreur de connexion à la base de données");
    } finally {
        try {
            if(st != null) st.close();
            if(con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur fermeture connexion: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_btnEnregistrerActionPerformed

    private void txtAuteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuteurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuteurActionPerformed

    private void cbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTypeActionPerformed
        // TODO add your handling code here:
        cbType.setSelectedIndex(0); //
    }//GEN-LAST:event_cbTypeActionPerformed

    private void txtExempleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExempleKeyReleased
        // TODO add your handling code here: // 1. Récupération et validation
    String texte = txtExemple.getText().trim();
    
    try {
        // 2. Conversion en nombre
        int exemplaires = Integer.parseInt(texte);
        
        // 3. Validation du nombre positif
        if (exemplaires <= 0) {
            JOptionPane.showMessageDialog(this,
                "Le nombre d'exemplaires doit être > 0",
                "Erreur de saisie",
                JOptionPane.WARNING_MESSAGE);
            txtExemple.setText(""); // Réinitialisation
            txtExemple.requestFocus(); // Retour au champ
            return;
        }
        
        // 4. Autofocus sur le bouton Enregistrer si valide
        //btnEnregistrer.requestFocus();
        
    } catch (NumberFormatException e) {
        // 5. Gestion des erreurs de format
        JOptionPane.showMessageDialog(this,
            "Veuillez entrer un nombre valide",
            "Erreur de format",
            JOptionPane.ERROR_MESSAGE);
        txtExemple.setText("");
        txtExemple.requestFocus();
    }
    }//GEN-LAST:event_txtExempleKeyReleased

    private void btnrechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrechercherActionPerformed
        // TODO add your handling code here:                                            
    String termeRecherche = txtRecherher.getText().trim();
    
    if (termeRecherche.isEmpty()) {
        // Si le champ est vide, recharger tous les livres
        chargerDonneesLivres();
        return;
    }
    
    try {
        // Utilisation de votre modèle de table existant
        DefaultTableModel model = (DefaultTableModel) tabLivre.getModel();
        model.setRowCount(0); // Vide le tableau
        
        // Connexion avec votre méthode existante
        Connection con = connexionbd.seConnecter();
        
        // Requête avec LIKE pour recherche partielle
        String sql = "SELECT * FROM livres WHERE " +
                     "titre LIKE ? OR " +
                     "auteur LIKE ? OR " +
                     "isbn LIKE ? OR " +
                     "type LIKE ? " +
                     "ORDER BY titre";
        
        PreparedStatement ps = con.prepareStatement(sql);
        String termeLike = "%" + termeRecherche + "%";
        ps.setString(1, termeLike);
        ps.setString(2, termeLike);
        ps.setString(3, termeLike);
        ps.setString(4, termeLike);
        
        ResultSet rs = ps.executeQuery();
        
        // Remplissage du tableau comme dans votre méthode chargerDonneesLivres()
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("titre"),
                rs.getString("auteur"),
                rs.getString("type"),
                rs.getString("isbn"),
                rs.getInt("exemplaires_totaux"),
                rs.getInt("exemplaires_disponibles")
            });
        }
        
        // Feedback si aucun résultat
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this,
                "Aucun livre trouvé pour : " + termeRecherche,
                "Aucun résultat",
                JOptionPane.INFORMATION_MESSAGE);
        }
        
        // Fermeture des ressources
        rs.close();
        ps.close();
        con.close();
        
    } catch (SQLException | ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this,
            "Erreur lors de la recherche : " + e.getMessage(),
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnrechercherActionPerformed

    private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnulerActionPerformed
        // TODO add your handling code here:                                          
    // 1. Vider tous les champs de saisie
    txtTitre.setText("");
    txtAuteur.setText("");
    cbType.setSelectedIndex(0); // Remet à la première option du ComboBox
    txtISBN.setText("");
    txtExemple.setText("");
    txtRecherher.setText("");
    
    // 2. Désélectionner la ligne dans le tableau
    tabLivre.clearSelection();
    
    chargerDonneesLivres(); // Recharge tous les livres depuis la BDD

    }//GEN-LAST:event_btnAnnulerActionPerformed

    private void tabLivreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabLivreMouseClicked
        // TODO add your handling code here:                                      
    // Ne rien faire si ce n'est pas un clic sur l'en-tête
    if (evt.getSource() instanceof JTableHeader) {
        JTableHeader header = (JTableHeader)evt.getSource();
        int column = header.columnAtPoint(evt.getPoint());
        
        // Obtenir le RowSorter existant ou en créer un nouveau
        TableRowSorter<DefaultTableModel> sorter;
        if (tabLivre.getRowSorter() == null) {
            sorter = new TableRowSorter<>((DefaultTableModel)tabLivre.getModel());
            tabLivre.setRowSorter(sorter);
        } else {
            sorter = (TableRowSorter<DefaultTableModel>)tabLivre.getRowSorter();
        }
        
        // Trier par la colonne cliquée
        sorter.toggleSortOrder(column);
    }

    }//GEN-LAST:event_tabLivreMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnnuler;
    private javax.swing.JButton btnEnregistrer;
    private javax.swing.JButton btnModifier;
    private javax.swing.JButton btnSupprimer;
    private javax.swing.JButton btnrechercher;
    private javax.swing.JComboBox<String> cbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabLivre;
    private javax.swing.JTextField txtAuteur;
    private javax.swing.JTextField txtExemple;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JTextField txtRecherher;
    private javax.swing.JTextField txtTitre;
    // End of variables declaration//GEN-END:variables
}
